// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
//RWStructuredBuffer<float> _HeightMap;
//Texture2D<float4> _Noise;
RWTexture3D<float4> _Density;
Texture2D<float4> _PerlinNoise;
//uint2 _Size;
int _NoiseResolution;
int _Octaves;


float4 BilinearSampling(in Texture2D<float4> inputText, in float2 uv)
{
	float4 result;
	const float2 pixelCoord = uv.xy * float2(_NoiseResolution, _NoiseResolution);
	float2 pixelCoordCenters = pixelCoord - 0.5;

	pixelCoordCenters = clamp(pixelCoordCenters, 0.0, float2(_NoiseResolution, _NoiseResolution) - 1.0);

	const uint2 pixelCoordCentersBotLeft = floor(pixelCoordCenters);
	
	const float2 pixelCoordCentersFrac = frac(pixelCoordCenters);

	const float4 dataBotLeft = inputText[uint2(pixelCoordCentersBotLeft)];
	const float4 dataBotRight = inputText[uint2(pixelCoordCentersBotLeft + uint2(1, 0))];
	const float4 dataTopLeft = inputText[uint2(pixelCoordCentersBotLeft + uint2(0, 1))];
	const float4 dataTopRight = inputText[uint2(pixelCoordCentersBotLeft + uint2(1, 1))];

	const float4 dataLerped = lerp(
		lerp(dataBotLeft, dataBotRight, pixelCoordCentersFrac.x),
		lerp(dataTopLeft, dataTopRight, pixelCoordCentersFrac.x),
		pixelCoordCentersFrac.y
	);
	result = dataLerped.xyzw;
	return result;

}

float fbm(in float2 st) {
	// Initial values
	float value = 0.0;
	float amplitude = .5;
	float frequency = 0.;
	//
	// Loop of octaves
	for (int i = 0; i < _Octaves; i++) {
		value += amplitude * BilinearSampling(_PerlinNoise, st).r;
		st *= 2.;
		amplitude *= .5;
	}
	return value;
}

[numthreads(8, 8, 8)]
void CSMain(uint3 id : SV_DispatchThreadID)
{

	float2 uv = float2((float)id.x / 64.0, (float)id.y / 64.0);
    _Density[id.xyz] = fbm(uv +float2((float)id.z/64.0, (float)id.z/64.0));
}
