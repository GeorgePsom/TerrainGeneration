#pragma enable_d3d11_debug_symbols
#pragma kernel CSMain
//#include "Sampling.hlsl"

RWTexture3D<float4> _Density;
Texture3D<float4> _PerlinNoise;
SamplerState MyLinearRepeatSampler;

int _NoiseResolution;
int _Octaves;

#define NOISE_LATTICE_SIZE 64
#define INV_LATTICE_SIZE (1.0/(float)(NOISE_LATTICE_SIZE))


//float4 BilinearSampling(in Texture2D<float4> inputText, in float2 uv)
//{
//	float4 result;
//	const float2 pixelCoord = uv.xy * float2(_NoiseResolution, _NoiseResolution);
//	float2 pixelCoordCenters = pixelCoord - 0.5;
//
//	pixelCoordCenters = clamp(pixelCoordCenters, 0.0, float2(_NoiseResolution, _NoiseResolution) - 1.0);
//
//	const uint2 pixelCoordCentersBotLeft = floor(pixelCoordCenters);
//	
//	const float2 pixelCoordCentersFrac = frac(pixelCoordCenters);
//
//	const float4 dataBotLeft = inputText[uint2(pixelCoordCentersBotLeft)];
//	const float4 dataBotRight = inputText[uint2(pixelCoordCentersBotLeft + uint2(1, 0))];
//	const float4 dataTopLeft = inputText[uint2(pixelCoordCentersBotLeft + uint2(0, 1))];
//	const float4 dataTopRight = inputText[uint2(pixelCoordCentersBotLeft + uint2(1, 1))];
//
//	const float4 dataLerped = lerp(
//		lerp(dataBotLeft, dataBotRight, pixelCoordCentersFrac.x),
//		lerp(dataTopLeft, dataTopRight, pixelCoordCentersFrac.x),
//		pixelCoordCentersFrac.y
//	);
//	result = dataLerped.xyzw;
//	return result;
//
//}

float fbm(in float3 uvw) {
	// Initial values
	float value = 0.0;
	float lacunarity = 1.5;
	float gain = 0.75;
	//
	// Initial values
	float amplitude =2.0f;
	float frequency = 1.;

	// Loop of octaves
	for (int i = 0; i < _Octaves; i++) {
		value += amplitude * _PerlinNoise.SampleLevel(MyLinearRepeatSampler, frequency * uvw, 0);
		frequency *= lacunarity;
		amplitude *= gain;
	}
	return value;
}
float4 NLQu(float3 uvw, Texture3D noiseTex) {
	return noiseTex[uvw];
}
float4 NLQs(float3 uvw, Texture3D noiseTex) {
	return NLQu(uvw, noiseTex) * 2 - 1;
}


float4 NMQu(float3 uvw, Texture3D noiseTex) {
	// smooth the input coord
	float3 t = frac(uvw * NOISE_LATTICE_SIZE + 0.5);
	float3 t2 = (3 - 2 * t) * t * t;
	float3 uvw2 = uvw + (t2 - t) / (float)(NOISE_LATTICE_SIZE);
	// fetch
	return NLQu(uvw2, noiseTex);
}

float4 NMQs(float3 uvw, Texture3D noiseTex) {
	// smooth the input coord
	float3 t = frac(uvw * NOISE_LATTICE_SIZE + 0.5);
	float3 t2 = (3 - 2 * t) * t * t;
	float3 uvw2 = uvw + (t2 - t) / (float)(NOISE_LATTICE_SIZE);
	// fetch  
	return NLQs(uvw2, noiseTex);
}

// SUPER MEGA HIGH QUALITY noise sampling (signed)
float NHQu(float3 uvw, Texture3D noiseTex, float smooth = 1)
{
	float3 uvw2 = floor(uvw * NOISE_LATTICE_SIZE) * INV_LATTICE_SIZE;
	float3 t = (uvw - uvw2) * NOISE_LATTICE_SIZE;
	t = lerp(t, t * t * (3 - 2 * t), smooth);

	float2 d = float2(INV_LATTICE_SIZE, 0);

	//#if 0
	//	// the 8-lookup version... (SLOW)
	//	float4 f1 = float4(noiseTex[uvw2 + d.xxx].x,
	//		tex.SampleLevel(noiseTex[uvw2 + d.yxx].x,
	//		tex.SampleLevel(noiseTex[uvw2 + d.xyx].x,
	//		tex.SampleLevel(noiseTex[uvw2 + d.yyx].x);
	//	float4 f2 = float4(noiseTex[uvw2 + d.xxy].x,
	//		tex.SampleLevel(noiseTex[uvw2 + d.yxy].x,
	//		tex.SampleLevel(noiseTex[uvw2 + d.xyy].x,
	//		tex.SampleLevel(noiseTex[uvw2 + d.yyy].x);
	//	float4 f3 = lerp(f2, f1, t.zzzz);
	//	float2 f4 = lerp(f3.zw, f3.xy, t.yy);
	//	float  f5 = lerp(f4.y, f4.x, t.x);
	//#else
		// THE TWO-SAMPLE VERSION: much faster!
		// note: requires that three YZ-neighbor texels' original .x values
		//       are packed into .yzw values of each texel.
	float4 f1 = noiseTex[uvw2].zxyw; // <+0, +y, +z, +yz>
	float4 f2 = noiseTex[uvw2 + d.xyy].zxyw; // <+x, +xy, +xz, +xyz>
	float4 f3 = lerp(f1, f2, t.xxxx);  // f3 = <+0, +y, +z, +yz>
	float2 f4 = lerp(f3.xy, f3.zw, t.yy); // f4 = <+0, +z>
	float  f5 = lerp(f4.x, f4.y, t.z);
	//#endif

	return f5;
}

float NHQs(float3 uvw, Texture3D tex, float smooth = 1) {
	return NHQu(uvw, tex, smooth) * 2 - 1;
}

[numthreads(8, 8, 8)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	//float3 ws = id.xyz;
	//float3 ws_orig = ws;

	//float density = 0;
	//float margin = 64.0f;
	//ws = ws.xyz / margin.xxx;
	//float4 uulf_rand = saturate(NMQu(ws * 0.00718, _PerlinNoise) * 2.0 - 0.5);
	//float4 uulf_rand2 = NMQu(ws * 0.000632, _PerlinNoise);
	//float4 uulf_rand3 = NMQu(ws * 0.000695, _PerlinNoise);

	//const float prewarp_str = 25.0f;
	//const float HFM = 1.0f;
	//float3 ulf_rand = 0;
	//
	//
	//ulf_rand.x = NHQs(ws * 0.0041 * 0.971, _PerlinNoise, 1) * 0.64
	//	+ NHQs(ws * 0.0041 * 0.461, _PerlinNoise, 1) * 0.32;
	//ulf_rand.y = NHQs(ws * 0.0041 * 0.997, _PerlinNoise, 1) * 0.64
	//	+ NHQs(ws * 0.0041 * 0.453, _PerlinNoise, 1) * 0.32;
	//ulf_rand.z = NHQs(ws * 0.0041 * 1.032, _PerlinNoise, 1) * 0.64
	//	+ NHQs(ws * 0.0041 * 0.511, _PerlinNoise, 1) * 0.32;


	//ws += ulf_rand.xyz * prewarp_str * saturate(uulf_rand3.x * 1.4 - 0.3);

	////density = -ws.y * 1;
	////// to add a stricter ground plane further below:
	////density += saturate((-4 - ws_orig.y * 0.3) * 3.0) * 40 * uulf_rand2.z;

	//// CRUSTY SHELF
	//// often creates smooth tops (~grass) and crumbly, eroded underneath parts.
	//float shelf_thickness_y = 2.5;//2.5;
	//float shelf_pos_y = -1;//-2;
	//float shelf_strength = 9.5;   // 1-4 is good
	//density = lerp(density, shelf_strength, 0.83 * saturate(shelf_thickness_y - abs(ws.y - shelf_pos_y)) *
	//	saturate(uulf_rand.y * 1.5 - 0.5));



	//// to make it extremely mountainous & climby:
	//density += ulf_rand.x * 80;



	//// sample 9 octaves of noise, w/rotated ws coord for the last few.
	//// note: sometimes you'll want to use NHQs (high-quality noise)
	////   instead of NMQs for the lowest 3 frequencies or so; otherwise
	////   they can introduce UNWANTED high-frequency noise (jitter).
	////   BE SURE TO PASS IN 'PackedNoiseVolX' instead of 'NoiseVolX'
	////   WHEN USING NHQs()!!!
	//// note: higher frequencies (that don't matter for long-range
	////   ambo) should be modulated by HFM so the compiler optimizes
	////   them out when EVAL_CHEAP is #defined.
	//// note: if you want to randomly rotate various octaves,
	////   feed c0..c7 (instead of ws) into the noise functions.
	////   This is especially good to do with the lowest frequency,
	////   so that it doesn't repeat (across the ground plane) as often...
	////   and so that you can actually randomize the terrain!
	////   Note that the shader compiler will skip generating any rotated
	////   coords (c0..c7) that are never used.
	//density +=
	//	(0
	//		//+ NLQs(ws*0.3200*0.934, noiseVol3).x*0.16*1.20 * HFM // skipped for long-range ambo
	//		+ NLQs(ws * 0.1600 * 1.021, _PerlinNoise).x * 0.32 * 1.16 * HFM // skipped for long-range ambo
	//		+ NLQs(ws * 0.0800 * 0.985, _PerlinNoise).x * 0.64 * 1.12 * HFM // skipped for long-range ambo
	//		+ NLQs(ws * 0.0400 * 1.051, _PerlinNoise).x * 1.28 * 1.08 * HFM // skipped for long-range ambo
	//		+ NLQs(ws * 0.0200 * 1.020, _PerlinNoise).x * 2.56 * 1.04
	//		+ NLQs(ws * 0.0100 * 0.968, _PerlinNoise).x * 5
	//		+ NMQs(ws * 0.0050 * 0.994, _PerlinNoise).x * 10 * 1.0 // MQ
	//		//+ NMQs(c6 * 0.0025 * 1.045, _PerlinNoise3D).x * 20 * 0.9 // MQ
	//		//+ NHQs(c7 * 0.0012 * 0.972, _PerlinNoise3D).x * 40 * 0.8 // HQ and *rotated*!
	//		);


	//// periodic flat spots:


	//const float flat_spot_str = 0;  // 0=off, 1=on
	//const float dist_between_spots = 330;
	//const float spot_inner_rad = 44;
	//const float spot_outer_rad = 66;
	//float2 spot_xz = floor(ws.xz / dist_between_spots) + 0.5;
	//float dist = length(ws.xz - spot_xz * dist_between_spots);
	//float t = saturate((spot_outer_rad - dist) / (spot_outer_rad - spot_inner_rad));
	//t = (3 - 2 * t) * t * t;
	//density = lerp(density, -ws.y * 1, t * 0.9 * flat_spot_str);

	float3 uvw = float3((float)id.x / 64.0, (float)id.y / 64.0, (float)id.z / 64);
	
	/*uvw.x = uvw.x > 1.0 ? frac(uvw.x) : uvw.x;
	uvw.y = uvw.y > 1.0 ? frac(uvw.y) : uvw.y;
	uvw.z = uvw.z > 1.0 ? frac(uvw.z) : uvw.z;*/

	float density = fbm(uvw);

    _Density[id.xyz] = density;
}
