#pragma kernel CSMain



RWBuffer<int> _pSum;
float _iter;
float _numPointsPerAxis;

int indexFromCoord(int x, int y, int z) {
    return z * ((int)_numPointsPerAxis -1) * ((int)_numPointsPerAxis - 1) + y * ((int)_numPointsPerAxis - 1) + x;
}

[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Stop one point before the end because voxel includes neighbouring points
    if (id.x >= (int)_numPointsPerAxis - 1 || id.y >= (int)_numPointsPerAxis - 1 || id.z >= (int)_numPointsPerAxis - 1) {
        return;
    }
    uint i = indexFromCoord(id.x, id.y, id.z);
    uint blockSize = 1 << (int)_iter;
    uint block = i / blockSize;
    uint offset = i - block * blockSize;
    block = 2 * block + 1;
    uint index = block * blockSize + offset;
    uint prevIndex = block * blockSize - 1;

    _pSum[index] += _pSum[prevIndex];
}
