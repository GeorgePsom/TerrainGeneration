// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "MarchingCubesInclude.hlsl"

struct marchingTriangles 
{
	int triangles[16];
};

StructuredBuffer<float> _TerrainMap;
RWStructuredBuffer<int> _NumOfPolygons;
StructuredBuffer<marchingTriangles> _TriangleTable;
float _TerrainSurface;




[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	float cube[8];
	int3 voxel = (int3)id.xyz;
	for (int i = 0; i < 8; i++)
	{
		int3 corner = voxel + CornerTable[i];
		cube[i] = _TerrainMap[corner.x + corner.y * 65 + corner.z * 65 * 65];
	}
	float4 corner0123 = float4(cube[0], cube[1], cube[2], cube[3]);
	float4 corner4567 = float4(cube[4], cube[5], cube[6], cube[7]);

	int caseNum = GetCaseIndex(corner0123, corner4567, _TerrainSurface);
	
	int sum = 0;
	for (int j = 0; j < 16; j++)
	{
		
		sum += (_TriangleTable[caseNum].triangles[j] > 0) ? 1 : 0;
	}
	_NumOfPolygons[id.x + id.y * 64 + id.z * 64 * 64] = sum;
}
