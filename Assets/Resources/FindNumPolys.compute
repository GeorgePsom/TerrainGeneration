// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
	
#include "MarchingCubesTables.hlsl"



StructuredBuffer<float4> points;
RWStructuredBuffer<int> _NumOfPolygons;
float _numPointsPerAxis;
float _isoLevel;





int indexFromCoord(int x, int y, int z) {
    return z *(int) _numPointsPerAxis * (int)_numPointsPerAxis + y * (int)_numPointsPerAxis + x;
}

int indexFromVoxel(int x, int y, int z) {
    return z * ((int)_numPointsPerAxis - 1) * ((int)_numPointsPerAxis - 1) + y * ((int)_numPointsPerAxis - 1) + x;
}


[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    //// Stop one point before the end because voxel includes neighbouring points
    //if (id.x >= (int)__numPointsPerAxis - 1 || id.y >= (int)__numPointsPerAxis - 1 || id.z >= (int)__numPointsPerAxis - 1) {
    //    return;
    //}

    // 8 corners of the current cube
    float4 cubeCorners[8] = {
        points[indexFromCoord(id.x, id.y, id.z)],
        points[indexFromCoord(id.x + 1, id.y, id.z)],
        points[indexFromCoord(id.x + 1, id.y, id.z + 1)],
        points[indexFromCoord(id.x, id.y, id.z + 1)],
        points[indexFromCoord(id.x, id.y + 1, id.z)],
        points[indexFromCoord(id.x + 1, id.y + 1, id.z)],
        points[indexFromCoord(id.x + 1, id.y + 1, id.z + 1)],
        points[indexFromCoord(id.x, id.y + 1, id.z + 1)]
    };

    // Calculate unique index for each cube configuration.
    // There are 256 possible values
    // A value of 0 means cube is entirely inside surface; 255 entirely outside.
    // The value is used to look up the edge table, which indicates which edges of the cube are cut by the isosurface.
    int cubeIndex = 0;
    if (cubeCorners[0].w < _isoLevel) cubeIndex |= 1;
    if (cubeCorners[1].w < _isoLevel) cubeIndex |= 2;
    if (cubeCorners[2].w < _isoLevel) cubeIndex |= 4;
    if (cubeCorners[3].w < _isoLevel) cubeIndex |= 8;
    if (cubeCorners[4].w < _isoLevel) cubeIndex |= 16;
    if (cubeCorners[5].w < _isoLevel) cubeIndex |= 32;
    if (cubeCorners[6].w < _isoLevel) cubeIndex |= 64;
    if (cubeCorners[7].w < _isoLevel) cubeIndex |= 128;
   
    int sum = 0;
	for (int i = 0; triangulation[cubeIndex][i] != -1; i += 3)
	{
		
		sum++;
	}
	_NumOfPolygons[indexFromVoxel(id.x, id.y, id.z)] = sum;
}
