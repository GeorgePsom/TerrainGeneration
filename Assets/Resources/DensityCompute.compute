#pragma kernel Density
#pragma enable_d3d11_debug_symbols
#include "Noise.hlsl"
//Noise Params
StructuredBuffer<float3> _offsets;
float _octaves;
float _lacunarity;
float _persistence;
float _noiseScale;
float _noiseWeight;
float _floorOffset;
float _weightMultiplier;
bool _closeEdges;
float _hardFloor;
float _hardFloorWeight;
float4 _params;

//World Params
RWStructuredBuffer<float4> _points;
float _numPointsPerAxis;
float3 _boundsSize;
float3 _center;
float3 _offset;
float3 _spacing;
float3 _worldSize;


// Landscape 

// Mountain
float _mountainous;
float _smoothness;
float _mountainHeight;
float _merging;

// Depth
float _warpFrequency;
float _warpAmplitude;

// Caves
float _scale;
float _terraces;
float _caveSmoothness;
float _fillness;

int indexFromCoord(uint x, uint y, uint z) {
	return z * (int)_numPointsPerAxis * (int)_numPointsPerAxis + y * (int)_numPointsPerAxis + x;
}

[numthreads(8, 8, 8)]
void Density(int3 id: SV_DispatchThreadID)
{
	const float PI = 3.14159265358979323846;
	if (id.x >= (int)_numPointsPerAxis || id.y >= (int)_numPointsPerAxis || id.z >= (int)_numPointsPerAxis)
		return;

	float3 pos = _center + id * _spacing - _boundsSize / 2;
	float offsetNoise = 0;
	
	//Depth 
	float noise = 0;
	float frequency = _noiseScale / 100.0;
	float amplitude = 1.0;
	float weight = 1.0f;
	float warp = snoise(pos * _warpFrequency);
	warp *= _warpAmplitude;
	for (int i = 0; i < (int)_octaves; i++)
	{
		float n = snoise((warp + offsetNoise) * frequency + _offsets[i] + _offset);
		float v = abs(n);
		v = v * v;
		v *= weight;
		weight = max(min(v * _weightMultiplier, 1), 0);
		noise += v * amplitude;
		amplitude *= _persistence;
		frequency *= _lacunarity;
	}
	float groundVal = -(pos.y + _floorOffset) + noise * _noiseWeight +
		(pos.y % _params.x) * _params.y;

	if (pos.y < _hardFloor) {
		groundVal += _hardFloorWeight;
	}
	//groundVal = pos.y > 1.0f ? 0.0f : groundVal;
	groundVal = pos.y > -7.0f ? 0.0f : groundVal;
	
	// Caves
	noise = 0;
	frequency = _scale / 100.0;
	amplitude = 1.0;
	weight = 1.0f;
	for (int j = 0; j <(int)8; j++)
	{
		float n = snoise((pos + offsetNoise) * frequency + _offsets[j] + _offset);
		float v = 1 - abs(n);
		v = v*v;
		v *= weight;
		weight = max(min(v * 10.0f, 1), 0);
		noise += v * amplitude;
		amplitude *= 0.54f;
		frequency *= 2.0f;
	}

	float depthVal = -(pos.y + 0) + noise * _fillness +
		  (pos.y % _terraces + 0.0f * 1.0f) * _caveSmoothness;

	/*if (pos.y < -7)
		depthVal -= 20;*/
	depthVal = pos.y > 1.0f ? 0.0f : depthVal;
	depthVal = pos.y < -7.0f ? 0.0f : depthVal;
	

	// Mountains
	noise = 0;
	frequency = 0.6f / 100.0;
	amplitude = 1.0;
	weight = 1.0f;
	for (int k = 0; k < (int)_smoothness; k++)
	{
		float n = snoise((pos + offsetNoise) * frequency + _offsets[k] + _offset);
		float v = 1 - abs(n);
		v = v * v;
		v *= weight;
		weight = max(min(v * 10.0f, 1), 0);
		noise += v * amplitude;
		amplitude *= 0.54;
		frequency *= 2.0f;
	}
	
	
	
	float mountainVal = -(pos.y + 0.0f) + noise * _merging +
		(sin(2.0f * PI * pos.z / _mountainous) + sin(2.0f * PI * pos.x / _mountainous)) * _mountainHeight;

	

	mountainVal +=  pos.y > 9.75f ?  -40.0f : 0.0f;
	
	
	float t = (1 - pos.y) / 2.0f;
	float interpolatedNoise = t * depthVal + (1 - t) * mountainVal;

	float t2 = (pos.y + 7) / 2.0f;
	float interpolatedDepth = t2 * groundVal + (1 - t2) * depthVal;
	
	

	
	float finalVal = pos.y > 1 ? mountainVal :
		pos.y >= -1 ? interpolatedNoise :
		pos.y > -7 ? depthVal :
		pos.y > -5 ? interpolatedDepth : groundVal;
	
	int index = indexFromCoord(id.x, id.y, id.z);
	//finalVal = -pos.y   + noise * _noiseWeight;
	_points[index] = float4(pos, finalVal);
}
