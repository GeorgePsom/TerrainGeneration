#pragma kernel Density
#pragma enable_d3d11_debug_symbols
#include "Noise.hlsl"
//Noise Params
StructuredBuffer<float3> _offsets;
float _octaves;
float _lacunarity;
float _persistence;
float _noiseScale;
float _noiseWeight;
float _floorOffset;
float _weightMultiplier;
bool _closeEdges;
float _hardFloor;
float _hardFloorWeight;
float4 _params;

//World Params
RWStructuredBuffer<float4> _points;
float _numPointsPerAxis;
float _boundsSize;
float3 _center;
float3 _offset;
float _spacing;
float3 _worldSize;


int indexFromCoord(uint x, uint y, uint z) {
	return z * (int)_numPointsPerAxis * (int)_numPointsPerAxis + y * (int)_numPointsPerAxis + x;
}

[numthreads(8, 8, 8)]
void Density(int3 id: SV_DispatchThreadID)
{
	if (id.x >= (int)_numPointsPerAxis || id.y >= (int)_numPointsPerAxis || id.z >= (int)_numPointsPerAxis)
		return;

	float3 pos = _center + id * _spacing - _boundsSize / 2;
	float offsetNoise = 0;
	float noise = 0;
	
	float frequency = _noiseScale / 100.0;
	float amplitude = 1.0;
	float weight = 1.0f;
	for (int j = 0; j <(int) _octaves; j++)
	{
		float n = snoise((pos + offsetNoise) * frequency + _offsets[j] + _offset);
		float v = 1 - abs(n);
		v = v*v;
		v *= weight;
		weight = max(min(v * _weightMultiplier, 1), 0);
		noise += v * amplitude;
		amplitude *= _persistence;
		frequency *= _lacunarity;
	}

	float finalVal = -(pos.y + _floorOffset) + noise * _noiseWeight + (pos.y % _params.x) * _params.y;
	
	if (pos.y < _hardFloor)
		finalVal += _hardFloorWeight;

	if (_closeEdges)
	{
		float3 edgeOffset = abs(pos * 2.0) - _worldSize + _spacing / 2.0;
		float edgeWeight = saturate(sign(max(max(edgeOffset.x, edgeOffset.y), edgeOffset.z)));
		finalVal = finalVal * (1 - edgeWeight) - 100 * edgeWeight;
	}

	int index = indexFromCoord(id.x, id.y, id.z);
	_points[index] = float4(pos, finalVal);
}
